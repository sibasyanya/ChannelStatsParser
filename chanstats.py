import re
import time
import random
import logging
import os
from tqdm import tqdm
import socks
from telethon.sync import TelegramClient
from telethon.errors import FloodWaitError, ChannelInvalidError, ChannelPrivateError
from telethon.tl.functions.channels import GetFullChannelRequest
from telethon.tl.functions.messages import GetHistoryRequest

import gspread
from oauth2client.service_account import ServiceAccountCredentials

# ===== –ë–∞–∑–æ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è (–≥–¥–µ –ª–µ–∂–∏—Ç —Å–∞–º —Å–∫—Ä–∏–ø—Ç) =====
base_dir = os.path.dirname(os.path.abspath(__file__))

def load_config(file_name, separator=":"):
    file_path = os.path.join(base_dir, file_name)
    with open(file_path, "r", encoding="utf-8") as f:
        line = f.readline().strip()
        parts = line.split(separator)
        return [part.strip() for part in parts]

# ===== –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è =====
api_id, api_hash = load_config("api_id_api_hash.txt")
api_id = int(api_id)
proxy_host, proxy_port, proxy_user, proxy_pass = load_config("proxy.txt")
proxy = (socks.SOCKS5, proxy_host, int(proxy_port), True, proxy_user, proxy_pass)
sheet_name, worksheet_name = load_config("sheet.txt")

google_json_keyfile = os.path.join(base_dir, 'projectyandexmess00001-1629a5334389.json')
input_file = os.path.join(base_dir, 'input.txt')
output_file = os.path.join(base_dir, 'output.txt')
log_file = os.path.join(base_dir, 'log.txt')

# ===== –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ =====
logging.basicConfig(filename=log_file, level=logging.INFO,
                    format='[%(asctime)s] %(levelname)s - %(message)s')

# ===== Google Sheets =====
scope = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
credentials = ServiceAccountCredentials.from_json_keyfile_name(google_json_keyfile, scope)
gclient = gspread.authorize(credentials)
sheet = gclient.open(sheet_name).worksheet(worksheet_name)

# ===== –ó–∞–ø—É—Å–∫ Telethon-–∫–ª–∏–µ–Ω—Ç–∞ =====
session_file = os.path.join(base_dir, 'anon_proxy.session')
with TelegramClient(session_file, api_id, api_hash, proxy=proxy) as client:
    with open(input_file, 'r', encoding='utf-8') as f:
        links = [line.strip() for line in f if line.strip()]

    results = [["–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞", "–°—Å—ã–ª–∫–∞", "–ü–æ–¥–ø–∏—Å—á–∏–∫–∏", "–ü—Ä–æ—Å–º–æ—Ç—Ä—ã"]]

    for link in tqdm(links, desc="–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–Ω–∞–ª–æ–≤"):
        match = re.search(r't\.me/([^/]+)', link)
        if not match:
            logging.warning(f'–ù–µ–≤–∞–ª–∏–¥–Ω–∞—è —Å—Å—ã–ª–∫–∞: {link}')
            results.append(["[–ù–ï–í–ê–õ–ò–î–ù–ê–Ø –°–°–´–õ–ö–ê]", link, "‚Äì", "‚Äì"])
            continue

        username = match.group(1)

        try:
            channel = client.get_entity(username)
            full = client(GetFullChannelRequest(channel))
            stats = full.full_chat
            name = channel.title
            subscribers = stats.participants_count

            history = client(GetHistoryRequest(
                peer=channel,
                limit=1,
                offset_date=None,
                offset_id=0,
                max_id=0,
                min_id=0,
                add_offset=0,
                hash=0
            ))

            last_msg = history.messages[0] if history.messages else None
            views = last_msg.views if last_msg and last_msg.views is not None else 0

            results.append([name, link, subscribers, views])
            logging.info(f'‚úÖ {name} | –ü–æ–¥–ø–∏—Å—á–∏–∫–∏: {subscribers} | –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {views}')

        except (ChannelPrivateError, ChannelInvalidError) as e:
            logging.error(f'üîí –ö–∞–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {link} ({str(e)})')
            results.append(["[–ü–†–ò–í–ê–¢–ù–´–ô/–ù–ï–°–£–©.]", link, "‚Äì", "‚Äì"])
        except FloodWaitError as e:
            logging.warning(f'‚è≥ FloodWait: –ø–∞—É–∑–∞ {e.seconds} —Å–µ–∫...')
            time.sleep(e.seconds)
        except Exception as e:
            error_msg = str(e)
            logging.exception(f'‚ùå –û—à–∏–±–∫–∞ –¥–ª—è {link}: {error_msg}')
            results.append([f"[–û–®–ò–ë–ö–ê: {error_msg[:30]}]", link, "‚Äì", "‚Äì"])
        finally:
            time.sleep(random.randint(1, 5))

    with open(output_file, 'w', encoding='utf-8') as f:
        for row in results[1:]:
            f.write(';'.join(str(x) for x in row) + '\n')

    sheet.clear()
    sheet.update(range_name='A1', values=results)

    logging.info('üéØ –ì–æ—Ç–æ–≤–æ! –î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ Google –¢–∞–±–ª–∏—Ü—É –∏ –≤ output.txt')
    print("‚úÖ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à—ë–Ω. –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
